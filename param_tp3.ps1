<#
.SYNOPSIS
D√©crit le but g√©n√©ral du script PowerShell.

.DESCRIPTION
Ce script ex√©cute une s√©rie d'op√©rations automatis√©es pour r√©pondre √† un besoin sp√©cifique. Il est con√ßu pour √™tre utilis√© dans un environnement Windows PowerShell et peut inclure des fonctionnalit√©s telles que la gestion de fichiers, l'automatisation de t√¢ches syst√®me, ou l'interaction avec des services externes.

.PARAMETER <NomDuParam√®tre>
D√©crit le r√¥le de chaque param√®tre utilis√© dans le script.

.EXAMPLE
Exemple d'utilisation du script avec des param√®tres appropri√©s.

.NOTES
Auteur : [Pierre-Henry Barge]
Date de cr√©ation : [10.07.2025]
Version : 1.0

#>
param(
    [Parameter(Mandatory=$true)]
    [ValidateSet("RotateKRBTGT", "MonitorKerberos", "DetectAnomalies", "TestDelegation")]
    [string]$Action,
    [ValidateSet("First", "Second")]
    [string]$Phase,
    [int]$Hours = 24,
    [string]$ServiceAccount = "SVC-WebApp",
    [string]$TargetService = "HTTP/DC01.corporate.local",
    [string]$ResourceServiceAccount = "SVC-Database"
)

$LogFile = "C:\Logs\KRBTGT-Rotation.log"
function Write-Log {
    param($Message)
    $Date = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
    "$Date - $Message" | Out-File -FilePath $LogFile -Append
}

function Rotate-KRBTGT {
    param([Parameter(Mandatory=$true)][ValidateSet("First", "Second")][string]$Phase)
    try {
        if ($Phase -eq "First") {
            Write-Log "D√©but de la premi√®re rotation KRBTGT"
            $NewPassword = ConvertTo-SecureString -String (New-Guid).Guid -AsPlainText -Force
            Set-ADAccountPassword -Identity krbtgt -NewPassword $NewPassword -Reset
            Write-Log "Premi√®re rotation termin√©e avec succ√®s"
        }
        elseif ($Phase -eq "Second") {
            Write-Log "D√©but de la deuxi√®me rotation KRBTGT"
            $NewPassword = ConvertTo-SecureString -String (New-Guid).Guid -AsPlainText -Force
            Set-ADAccountPassword -Identity krbtgt -NewPassword $NewPassword -Reset
            Write-Log "Deuxi√®me rotation termin√©e avec succ√®s"
        }
        repadmin /syncall /AeD
        Write-Log "R√©plication forc√©e"
    } catch {
        Write-Log "Erreur : $($_.Exception.Message)"
    }
}

function Monitor-Kerberos {
    # Nettoyage des jobs et abonnements
    Get-Job | Remove-Job -Force -ErrorAction SilentlyContinue
    Get-EventSubscriber | Unregister-Event -ErrorAction SilentlyContinue

    Write-Host "üîç SURVEILLANCE KERBEROS EN TEMPS R√âEL" -ForegroundColor Green -BackgroundColor Black
    Write-Host "======================================" -ForegroundColor Green
    Write-Host "Appuyez sur Ctrl+C pour arr√™ter..." -ForegroundColor Yellow
    Write-Host ""

    $EventsToMonitor = @(4768, 4769, 4771, 4772, 4624, 4625)
    $SuspiciousPatterns = @("0x40810000", "0x40800000", "0x40810010", "0x60810010")

    while ($true) {
        try {
            $RecentEvents = Get-WinEvent -FilterHashtable @{
                LogName = 'Security'
                ID = $EventsToMonitor
                StartTime = (Get-Date).AddSeconds(-5)
            } -ErrorAction SilentlyContinue

            foreach ($Event in $RecentEvents) {
                $TimeStamp = Get-Date -Format "HH:mm:ss"
                Write-Host "$TimeStamp - EventID: $($Event.Id) - $($Event.Message.Substring(0, [Math]::Min(80, $Event.Message.Length)))"
            }
            Write-Host "." -NoNewline -ForegroundColor DarkGreen
            Start-Sleep -Seconds 5
        } catch {
            Write-Host "!" -NoNewline -ForegroundColor Red
            Start-Sleep -Seconds 10
        }
    }
}

function Detect-KerberosAnomalies {
    param([int]$Hours = 24)
    # Exemple simple, √† adapter selon vos besoins
    $since = (Get-Date).AddHours(-$Hours)
    $events = Get-WinEvent -FilterHashtable @{
        LogName = 'Security'
        ID = 4769
        StartTime = $since
    } -ErrorAction SilentlyContinue

    $SuspiciousTickets = $events | Where-Object { $_.Message -match "0x40810000" }
    $ExpiredTickets = $events | Where-Object { $_.Message -match "expired" }
    $InvalidServices = $events | Where-Object { $_.Message -match "unknown" }
    $FailedLogins = (Get-WinEvent -FilterHashtable @{LogName='Security'; ID=4625; StartTime=$since} -ErrorAction SilentlyContinue)
    $SuspiciousAccounts = $events | Where-Object { $_.Message -match "krbtgt" }

    return [PSCustomObject]@{
        SuspiciousTickets = $SuspiciousTickets.Count
        ExpiredTickets    = $ExpiredTickets.Count
        InvalidServices   = $InvalidServices.Count
        FailedLogins      = $FailedLogins.Count
        SuspiciousAccounts= $SuspiciousAccounts.Count
    }
}

function Show-SimpleReport {
    param($Report)
    Write-Host "Tickets suspects: $($Report.SuspiciousTickets)" -ForegroundColor Yellow
    Write-Host "Tickets expir√©s: $($Report.ExpiredTickets)" -ForegroundColor Yellow
    Write-Host "Services invalides: $($Report.InvalidServices)" -ForegroundColor Yellow
    Write-Host "√âchecs connexion: $($Report.FailedLogins)" -ForegroundColor Yellow
    Write-Host "Comptes suspects: $($Report.SuspiciousAccounts)" -ForegroundColor Yellow
}

function Test-ConstrainedDelegation {
    param(
        [Parameter(Mandatory=$true)][string]$ServiceAccount,
        [Parameter(Mandatory=$true)][string]$TargetService,
        [string]$TestUser = "Administrateur"
    )
    # V√©rifie la d√©l√©gation contrainte (exemple simple)
    try {
        $adUser = Get-ADUser -Identity $ServiceAccount -Properties msDS-AllowedToDelegateTo
        if ($adUser.'msDS-AllowedToDelegateTo' -contains $TargetService) {
            return $true
        } elseif ($adUser.'msDS-AllowedToDelegateTo') {
            return $null
        } else {
            return $false
        }
    } catch {
        return $false
    }
}

function Test-RBCD {
    param([string]$ResourceServiceAccount)
    try {
        $rbcdConfig = Get-ADUser -Identity $ResourceServiceAccount -Properties msDS-AllowedToActOnBehalfOfOtherIdentity
        if ($rbcdConfig.'msDS-AllowedToActOnBehalfOfOtherIdentity') {
            Write-Host "‚úÖ RBCD configur√©e sur $ResourceServiceAccount" -ForegroundColor Green
            $descriptor = $rbcdConfig.'msDS-AllowedToActOnBehalfOfOtherIdentity'
            $rawSD = $descriptor
            $sd = New-Object System.Security.AccessControl.RawSecurityDescriptor -ArgumentList ($rawSD, 0)
            Write-Host "Comptes autoris√©s √† d√©l√©guer vers $ResourceServiceAccount :" -ForegroundColor Yellow
            foreach ($ace in $sd.DiscretionaryAcl) {
                try {
                    $sid = $ace.SecurityIdentifier
                    $principal = $sid.Translate([System.Security.Principal.NTAccount]).Value
                    Write-Host "  - $principal" -ForegroundColor Gray
                } catch {
                    Write-Host "  - $sid" -ForegroundColor Gray
                }
            }
        } else {
            Write-Host "‚ùå Aucune RBCD configur√©e sur $ResourceServiceAccount" -ForegroundColor Red
        }
    } catch {
        Write-Host "‚ùå Erreur lors de la v√©rification RBCD : $($_.Exception.Message)" -ForegroundColor Red
    }
}

# --- MAIN EXECUTION ---
switch ($Action) {
    "RotateKRBTGT" {
        if (-not $Phase) { throw "Le param√®tre -Phase est requis pour RotateKRBTGT." }
        Rotate-KRBTGT -Phase $Phase
    }
    "MonitorKerberos" {
        Monitor-Kerberos
    }
    "DetectAnomalies" {
        Write-Host "D√âMARRAGE ANALYSE KERBEROS" -ForegroundColor White
        Write-Host "Date: $(Get-Date)" -ForegroundColor Gray
        $AnomaliesReport = Detect-KerberosAnomalies -Hours $Hours
        Show-SimpleReport -Report $AnomaliesReport
        try {
            if (!(Test-Path "C:\temp")) { 
                New-Item -ItemType Directory -Path "C:\temp" -Force | Out-Null
            }
            $ReportFile = "C:\temp\KerberosReport_$(Get-Date -Format 'yyyyMMdd_HHmmss').txt"
            $ReportContent = @"
RAPPORT KERBEROS - $(Get-Date)
==============================

Tickets suspects: $($AnomaliesReport.SuspiciousTickets)
Tickets expir√©s: $($AnomaliesReport.ExpiredTickets)
Services invalides: $($AnomaliesReport.InvalidServices)
√âchecs connexion: $($AnomaliesReport.FailedLogins)
Comptes suspects: $($AnomaliesReport.SuspiciousAccounts)

G√©n√©r√© le: $(Get-Date)
"@
            $ReportContent | Out-File -FilePath $ReportFile -Encoding UTF8
            Write-Host "Rapport sauvegard√©: $ReportFile" -ForegroundColor Green
        } catch {
            Write-Warning "Impossible de sauvegarder le rapport: $($_.Exception.Message)"
        }
        Write-Host "Analyse termin√©e." -ForegroundColor Green
    }
    "TestDelegation" {
        Write-Host "D√©but du test de d√©l√©gation contrainte..." -ForegroundColor Cyan
        $result = Test-ConstrainedDelegation -ServiceAccount $ServiceAccount -TargetService $TargetService
        Write-Host "`n=== R√©sultat du test ===" -ForegroundColor Cyan
        switch ($result) {
            $true { Write-Host "‚úÖ SUCC√àS : La d√©l√©gation contrainte fonctionne" -ForegroundColor Green }
            $false { Write-Host "‚ùå √âCHEC : La d√©l√©gation contrainte ne fonctionne pas" -ForegroundColor Red }
            $null { Write-Host "‚ö†Ô∏è  IND√âTERMIN√â : Configuration correcte mais test de ticket impossible" -ForegroundColor Yellow }
        }
        Write-Host "`n=== Test RBCD (Resource-Based Constrained Delegation) ===" -ForegroundColor Cyan
        Test-RBCD -ResourceServiceAccount $ResourceServiceAccount
    }
}
